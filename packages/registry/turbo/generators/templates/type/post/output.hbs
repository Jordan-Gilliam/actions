const OutputSchema = z.void()
type TOutput = typeof OutputSchema;

const CardComponent: TActionComponent<TInput, TOutput>["component"] = ({
  input,
  isPlaceholderComponent,
  isSkeletonComponent,
  isError,
  isSuccess,
  isLoading,
  onSubmit
}) => {
  const form = useForm<z.infer<typeof InputSchema>>({
    resolver: zodResolver(InputSchema),
  })

  return (
    <Card className="w-[90%] md:w-[80%] lg:w-[600px]">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Avatar className="h-6 w-6">
            <AvatarImage src={'/logos/{{ camelCase }}.svg'} alt="{{ resource }} logo" />
          </Avatar>
          {{ titleCase name }}
        </CardTitle>
        <CardDescription>
          {{ sentenceCase description }}
        </CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="flex flex-col gap-4">
            Create your form here!
          </CardContent>
          <CardFooter className="justify-end gap-2">
            <Button
              type="submit"
              disabled={
                isLoading ||
                isPlaceholderComponent
              }
              variant={isSuccess ? 'success' : undefined}
            >
              {isLoading ? <Spinner /> : null}
              {!isSuccess ? 'Submit' : 'Submitted!'}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
  )
}